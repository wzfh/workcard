Date/Time:       2023-10-23 11:54:51 
Command line:    C:\Users\rjcsyb2\AppData\Roaming\Python\Python39\Scripts\briefcase new

OS Release:      Windows 10
OS Version:      10.0.19045
Architecture:    AMD64
Platform:        Windows-10-10.0.19045-SP0

Python exe:      C:\Users\rjcsyb2\AppData\Local\Programs\Python\Python39\python.exe
Python version:  3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]
Virtual env:     False
Conda env:       False

Briefcase:       0.3.15
Target platform: all
Target format:   None

Environment Variables:
    ALLUSERSPROFILE=C:\ProgramData
    APPDATA=C:\Users\rjcsyb2\AppData\Roaming
    CLASSPATH=.;C:\Users\rjcsyb2\Desktop\jdk\lib;C:\Users\rjcsyb2\Desktop\jdk\lib\tools.jar
    COMMONPROGRAMFILES=C:\Program Files\Common Files
    COMMONPROGRAMFILES(X86)=C:\Program Files (x86)\Common Files
    COMMONPROGRAMW6432=C:\Program Files\Common Files
    COMPUTERNAME=2W4L339U70414QL
    COMSPEC=C:\Windows\system32\cmd.exe
    DRIVERDATA=C:\Windows\System32\Drivers\DriverData
    FPS_BROWSER_APP_PROFILE_STRING=Internet Explorer
    FPS_BROWSER_USER_PROFILE_STRING=Default
    HOMEDRIVE=C:
    HOMEPATH=\Users\rjcsyb2
    IDEA_INITIAL_DIRECTORY=C:\Users\rjcsyb2\Desktop\PyCharm Community Edition 2022.3.1\jbr\bin
    JAVA_HOME=C:\Users\rjcsyb2\Desktop\jdk
    LOCALAPPDATA=C:\Users\rjcsyb2\AppData\Local
    LOGONSERVER=\\2W4L339U70414QL
    NUMBER_OF_PROCESSORS=4
    ONEDRIVE=C:\Users\rjcsyb2\OneDrive
    OS=Windows_NT
    PATH=C:\Users\rjcsyb2\AppData\Local\Programs\Python\Python39\Scripts;C:\Program Files\Azure Data Studio\bin;C:\Users\rjcsyb2\AppData\Roaming\Python\Python39\Scripts;C:\Users\rjcsyb2\Desktop\ADB;"C:\Users\rjcsyb2\Desktop\jdk\bin; C:\Users\rjcsyb2\Desktop\jdk\jre\bin;";C:\Users\rjcsyb2\Desktop\jdk\bin;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Common Files\TEC-IT\TBarCode\10.2\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\Microsoft SQL Server\160\Tools\Binn\;C:\Program Files\Microsoft SQL Server\160\Tools\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\Program Files\Microsoft SQL Server\160\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\160\DTS\Binn\;C:\wamp64\bin\mysql\mysql8.0.31\bin;C:\Users\rjcsyb2\AppData\Local\Programs\Python\Python39\Scripts;C:\Users\rjcsyb2\AppData\Roaming\Python\Python39\Scripts;C:\Users\rjcsyb2\Desktop\Microsoft VS Code\bin;C:\Users\rjcsyb2\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Azure Data Studio\bin;C:\wamp64\bin\mysql\mysql8.0.31\bin;
    PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL
    PROCESSOR_ARCHITECTURE=AMD64
    PROCESSOR_IDENTIFIER=Intel64 Family 6 Model 158 Stepping 9, GenuineIntel
    PROCESSOR_LEVEL=6
    PROCESSOR_REVISION=9e09
    PROGRAMDATA=C:\ProgramData
    PROGRAMFILES=C:\Program Files
    PROGRAMFILES(X86)=C:\Program Files (x86)
    PROGRAMW6432=C:\Program Files
    PSMODULEPATH=C:\Users\rjcsyb2\Documents\WindowsPowerShell\Modules;C:\Program Files\WindowsPowerShell\Modules;C:\Windows\system32\WindowsPowerShell\v1.0\Modules;C:\Program Files (x86)\Microsoft SQL Server\160\Tools\PowerShell\Modules\
    PUBLIC=C:\Users\Public
    SESSIONNAME=Console
    SYSTEMDRIVE=C:
    SYSTEMROOT=C:\Windows
    TEMP=C:\Users\rjcsyb2\AppData\Local\Temp
    TERMINAL_EMULATOR=JetBrains-JediTerm
    TERM_SESSION_ID=23b8e77c-fc9a-4b3b-8cd6-e2b739e96856
    TMP=C:\Users\rjcsyb2\AppData\Local\Temp
    USERDOMAIN=2W4L339U70414QL
    USERDOMAIN_ROAMINGPROFILE=2W4L339U70414QL
    USERNAME=rjcsyb2
    USERPROFILE=C:\Users\rjcsyb2
    WINDIR=C:\Windows
    __INTELLIJ_COMMAND_HISTFILE__=C:\Users\rjcsyb2\AppData\Local\JetBrains\PyCharmCE2022.3\terminal\history\workcard-history

Briefcase Log:
[11:54:50]                                                                                                                                                            __main__.py:40
           Briefcase requires git, but it is not installed (or is not on your PATH). Visit:                                                                           __main__.py:41
                                                                                                                                                                      __main__.py:41
               https://git-scm.com/                                                                                                                                   __main__.py:41
                                                                                                                                                                      __main__.py:41
           to download and install git manually.                                                                                                                      __main__.py:41
                                                                                                                                                                      __main__.py:41
           If you have installed git recently and are still getting this error, you may                                                                               __main__.py:41
           need to restart your terminal session.                                                                                                                     __main__.py:41

Main thread traceback:
╭─────────────────────────────────────────────────────────────────────── Traceback (most recent call last) ────────────────────────────────────────────────────────────────────────╮
│ C:\Users\rjcsyb2\AppData\Roaming\Python\Python39\site-packages\git\__init__.py:89 in <module>                                                                                    │
│                                                                                                                                                                                  │
│   86                                                                                                                                                                             │
│   87 #################                                                                                                                                                           │
│   88 try:                                                                                                                                                                        │
│ ❱ 89 │   refresh()                                                                                                                                                               │
│   90 except Exception as _exc:                                                                                                                                                   │
│   91 │   raise ImportError("Failed to initialize: {0}".format(_exc)) from _exc                                                                                                   │
│   92 #################                                                                                                                                                           │
│                                                                                                                                                                                  │
│ ╭────────────────────────────────────────────────────────────────────────────── locals ───────────────────────────────────────────────────────────────────────────────╮          │
│ │               _init_externals = <function _init_externals at 0x0000029471895700>                                                                                    │          │
│ │                         Actor = <class 'git.util.Actor'>                                                                                                            │          │
│ │           AmbiguousObjectName = <class 'gitdb.exc.AmbiguousObjectName'>                                                                                             │          │
│ │                       BadName = <class 'gitdb.exc.BadName'>                                                                                                         │          │
│ │                     BadObject = <class 'gitdb.exc.BadObject'>                                                                                                       │          │
│ │                 BadObjectType = <class 'gitdb.exc.BadObjectType'>                                                                                                   │          │
│ │                          base = <module 'git.index.base' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\index\\base.py'>         │          │
│ │                BaseIndexEntry = <class 'git.index.typ.BaseIndexEntry'>                                                                                              │          │
│ │                          Blob = <class 'git.objects.blob.Blob'>                                                                                                     │          │
│ │                    BlobFilter = <class 'git.index.typ.BlobFilter'>                                                                                                  │          │
│ │              BlockingLockFile = <class 'git.util.BlockingLockFile'>                                                                                                 │          │
│ │                    CacheError = <class 'git.exc.CacheError'>                                                                                                        │          │
│ │                 CheckoutError = <class 'git.exc.CheckoutError'>                                                                                                     │          │
│ │                           cmd = <module 'git.cmd' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\cmd.py'>                        │          │
│ │                  CommandError = <class 'git.exc.CommandError'>                                                                                                      │          │
│ │                        Commit = <class 'git.objects.commit.Commit'>                                                                                                 │          │
│ │                        compat = <module 'git.compat' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\compat.py'>                  │          │
│ │                        config = <module 'git.config' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\config.py'>                  │          │
│ │                            db = <module 'git.db' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\db.py'>                          │          │
│ │                          diff = <module 'git.diff' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\diff.py'>                      │          │
│ │                          Diff = <class 'git.diff.Diff'>                                                                                                             │          │
│ │                      Diffable = <class 'git.diff.Diffable'>                                                                                                         │          │
│ │                     DiffIndex = <class 'git.diff.DiffIndex'>                                                                                                        │          │
│ │                           exc = <module 'git.exc' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\exc.py'>                        │          │
│ │                     FetchInfo = <class 'git.remote.FetchInfo'>                                                                                                      │          │
│ │                           fun = <module 'git.index.fun' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\index\\fun.py'>           │          │
│ │                           Git = <class 'git.cmd.Git'>                                                                                                               │          │
│ │                        GIT_OK = False                                                                                                                               │          │
│ │                GitCmdObjectDB = <class 'git.db.GitCmdObjectDB'>                                                                                                     │          │
│ │               GitCommandError = <class 'git.exc.GitCommandError'>                                                                                                   │          │
│ │            GitCommandNotFound = <class 'git.exc.GitCommandNotFound'>                                                                                                │          │
│ │               GitConfigParser = <class 'git.config.GitConfigParser'>                                                                                                │          │
│ │                         GitDB = <class 'gitdb.db.git.GitDB'>                                                                                                        │          │
│ │                      GitError = <class 'git.exc.GitError'>                                                                                                          │          │
│ │                          head = <module 'git.refs.head' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\refs\\head.py'>           │          │
│ │                          HEAD = <class 'git.refs.head.HEAD'>                                                                                                        │          │
│ │                          Head = <class 'git.refs.head.Head'>                                                                                                        │          │
│ │            HookExecutionError = <class 'git.exc.HookExecutionError'>                                                                                                │          │
│ │                         index = <module 'git.index' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\index\\__init__.py'>          │          │
│ │                    IndexEntry = <class 'git.index.typ.IndexEntry'>                                                                                                  │          │
│ │                     IndexFile = <class 'git.index.base.IndexFile'>                                                                                                  │          │
│ │                   IndexObject = <class 'git.objects.base.IndexObject'>                                                                                              │          │
│ │                       inspect = <module 'inspect' from 'C:\\Users\\rjcsyb2\\AppData\\Local\\Programs\\Python\\Python39\\lib\\inspect.py'>                           │          │
│ │                 InvalidDBRoot = <class 'gitdb.exc.InvalidDBRoot'>                                                                                                   │          │
│ │     InvalidGitRepositoryError = <class 'git.exc.InvalidGitRepositoryError'>                                                                                         │          │
│ │                          List = typing.List                                                                                                                         │          │
│ │                      LockFile = <class 'git.util.LockFile'>                                                                                                         │          │
│ │                           log = <module 'git.refs.log' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\refs\\log.py'>             │          │
│ │               NoSuchPathError = <class 'git.exc.NoSuchPathError'>                                                                                                   │          │
│ │                     NULL_TREE = <object object at 0x0000029470E7A840>                                                                                               │          │
│ │                        Object = <class 'git.objects.base.Object'>                                                                                                   │          │
│ │                       objects = <module 'git.objects' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\objects\\__init__.py'>      │          │
│ │                      ODBError = <class 'gitdb.exc.ODBError'>                                                                                                        │          │
│ │                      Optional = typing.Optional                                                                                                                     │          │
│ │                            os = <module 'os' from 'C:\\Users\\rjcsyb2\\AppData\\Local\\Programs\\Python\\Python39\\lib\\os.py'>                                     │          │
│ │                           osp = <module 'ntpath' from 'C:\\Users\\rjcsyb2\\AppData\\Local\\Programs\\Python\\Python39\\lib\\ntpath.py'>                             │          │
│ │                    ParseError = <class 'gitdb.exc.ParseError'>                                                                                                      │          │
│ │                      PathLike = typing.Union[str, ForwardRef('os.PathLike[str]')]                                                                                   │          │
│ │                      PushInfo = <class 'git.remote.PushInfo'>                                                                                                       │          │
│ │                     reference = <module 'git.refs.reference' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\refs\\reference.py'> │          │
│ │                     Reference = <class 'git.refs.reference.Reference'>                                                                                              │          │
│ │                        RefLog = <class 'git.refs.log.RefLog'>                                                                                                       │          │
│ │                   RefLogEntry = <class 'git.refs.log.RefLogEntry'>                                                                                                  │          │
│ │                       refresh = <function refresh at 0x00000294718958B0>                                                                                            │          │
│ │                          refs = <module 'git.refs' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\refs\\__init__.py'>            │          │
│ │                        remote = <module 'git.remote' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\remote.py'>                  │          │
│ │                        Remote = <class 'git.remote.Remote'>                                                                                                         │          │
│ │                RemoteProgress = <class 'git.util.RemoteProgress'>                                                                                                   │          │
│ │               RemoteReference = <class 'git.refs.remote.RemoteReference'>                                                                                           │          │
│ │    remove_password_if_present = <function remove_password_if_present at 0x0000029471953DC0>                                                                         │          │
│ │                          repo = <module 'git.repo' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\repo\\__init__.py'>            │          │
│ │                          Repo = <class 'git.repo.base.Repo'>                                                                                                        │          │
│ │          RepositoryDirtyError = <class 'git.exc.RepositoryDirtyError'>                                                                                              │          │
│ │                        rmtree = <function rmtree at 0x0000029471953280>                                                                                             │          │
│ │                    RootModule = <class 'git.objects.submodule.root.RootModule'>                                                                                     │          │
│ │            RootUpdateProgress = <class 'git.objects.submodule.root.RootUpdateProgress'>                                                                             │          │
│ │                   safe_decode = <function safe_decode at 0x0000029471895CA0>                                                                                        │          │
│ │                      Sequence = typing.Sequence                                                                                                                     │          │
│ │                     StageType = <class 'int'>                                                                                                                       │          │
│ │                         Stats = <class 'git.util.Stats'>                                                                                                            │          │
│ │                     Submodule = <class 'git.objects.submodule.base.Submodule'>                                                                                      │          │
│ │                      symbolic = <module 'git.refs.symbolic' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\refs\\symbolic.py'>   │          │
│ │             SymbolicReference = <class 'git.refs.symbolic.SymbolicReference'>                                                                                       │          │
│ │                           sys = <module 'sys' (built-in)>                                                                                                           │          │
│ │                           tag = <module 'git.refs.tag' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\refs\\tag.py'>             │          │
│ │                           Tag = <class 'git.refs.tag.TagReference'>                                                                                                 │          │
│ │                     TagObject = <class 'git.objects.tag.TagObject'>                                                                                                 │          │
│ │                  TagReference = <class 'git.refs.tag.TagReference'>                                                                                                 │          │
│ │                    to_hex_sha = <function to_hex_sha at 0x00000294718E8CA0>                                                                                         │          │
│ │                          Tree = <class 'git.objects.tree.Tree'>                                                                                                     │          │
│ │                  TreeModifier = <class 'git.objects.tree.TreeModifier'>                                                                                             │          │
│ │                         Tuple = typing.Tuple                                                                                                                        │          │
│ │                           typ = <module 'git.index.typ' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\index\\typ.py'>           │          │
│ │                 TYPE_CHECKING = False                                                                                                                               │          │
│ │                         types = <module 'git.types' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\types.py'>                    │          │
│ │                         Union = typing.Union                                                                                                                        │          │
│ │          UnmergedEntriesError = <class 'git.exc.UnmergedEntriesError'>                                                                                              │          │
│ │             UnsafeOptionError = <class 'git.exc.UnsafeOptionError'>                                                                                                 │          │
│ │           UnsafeProtocolError = <class 'git.exc.UnsafeProtocolError'>                                                                                               │          │
│ │          UnsupportedOperation = <class 'gitdb.exc.UnsupportedOperation'>                                                                                            │          │
│ │                UpdateProgress = <class 'git.objects.submodule.base.UpdateProgress'>                                                                                 │          │
│ │                          util = <module 'git.index.util' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\index\\util.py'>         │          │
│ │ WorkTreeRepositoryUnsupported = <class 'git.exc.WorkTreeRepositoryUnsupported'>                                                                                     │          │
│ ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯          │
│                                                                                                                                                                                  │
│ C:\Users\rjcsyb2\AppData\Roaming\Python\Python39\site-packages\git\__init__.py:76 in refresh                                                                                     │
│                                                                                                                                                                                  │
│   73 │   global GIT_OK                                                                        ╭── locals ───╮                                                                    │
│   74 │   GIT_OK = False                                                                       │ path = None │                                                                    │
│   75 │                                                                                        ╰─────────────╯                                                                    │
│ ❱ 76 │   if not Git.refresh(path=path):                                                                                                                                          │
│   77 │   │   return                                                                                                                                                              │
│   78 │   if not FetchInfo.refresh():                                                                                                                                             │
│   79 │   │   return  # type: ignore [unreachable]                                                                                                                                │
│                                                                                                                                                                                  │
│ C:\Users\rjcsyb2\AppData\Roaming\Python\Python39\site-packages\git\cmd.py:393 in refresh                                                                                         │
│                                                                                                                                                                                  │
│    390 │   │   │   │   │   if mode in warn:                                                                                                                                      │
│    391 │   │   │   │   │   │   print("WARNING: %s" % err)                                                                                                                        │
│    392 │   │   │   │   │   else:                                                                                                                                                 │
│ ❱  393 │   │   │   │   │   │   raise ImportError(err)                                                                                                                            │
│    394 │   │   │   │   else:                                                                                                                                                     │
│    395 │   │   │   │   │   err = (                                                                                                                                               │
│    396 │   │   │   │   │   │   dedent(                                                                                                                                           │
│                                                                                                                                                                                  │
│ ╭───────────────────────────────────────────── locals ──────────────────────────────────────────────╮                                                                            │
│ │     cls = <class 'git.cmd.Git'>                                                                   │                                                                            │
│ │     err = 'Bad git executable.\nThe git executable must be specified in one of the following'+534 │                                                                            │
│ │   error = ['error', 'e', 'raise', 'r', '2']                                                       │                                                                            │
│ │ has_git = False                                                                                   │                                                                            │
│ │    mode = 'raise'                                                                                 │                                                                            │
│ │ new_git = 'git'                                                                                   │                                                                            │
│ │ old_git = None                                                                                    │                                                                            │
│ │    path = None                                                                                    │                                                                            │
│ │   quiet = ['quiet', 'q', 'silence', 's', 'none', 'n', '0']                                        │                                                                            │
│ │    warn = ['warn', 'w', 'warning', '1']                                                           │                                                                            │
│ ╰───────────────────────────────────────────────────────────────────────────────────────────────────╯                                                                            │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
ImportError: Bad git executable.
The git executable must be specified in one of the following ways:
    - be included in your $PATH
    - be set via $GIT_PYTHON_GIT_EXECUTABLE
    - explicitly set via git.refresh()

All git commands will error until this is rectified.

This initial warning can be silenced or aggravated in the future by setting the
$GIT_PYTHON_REFRESH environment variable. Use one of the following values:
    - quiet|q|silence|s|none|n|0: for no warning or exception
    - warn|w|warning|1: for a printed warning
    - error|e|raise|r|2: for a raised exception

Example:
    export GIT_PYTHON_REFRESH=quiet


The above exception was the direct cause of the following exception:

╭─────────────────────────────────────────────────────────────────────── Traceback (most recent call last) ────────────────────────────────────────────────────────────────────────╮
│ C:\Users\rjcsyb2\AppData\Roaming\Python\Python39\site-packages\briefcase\integrations\git.py:37 in verify_install                                                                │
│                                                                                                                                                                                  │
│   34 │   │                                                                                    ╭─────────────────────────────────── locals ────────────────────────────────────╮  │
│   35 │   │   # Check whether the git executable could be imported.                            │    cls = <class 'briefcase.integrations.git.Git'>                             │  │
│   36 │   │   try:                                                                             │ kwargs = {'app': None}                                                        │  │
│ ❱ 37 │   │   │   import git                                                                   │  tools = <briefcase.integrations.base.ToolCache object at 0x0000029471867F70> │  │
│   38 │   │   except ImportError as e:  # pragma: no cover                                     ╰───────────────────────────────────────────────────────────────────────────────╯  │
│   39 │   │   │   # macOS provides git as part of the Xcode command line tools,                                                                                                   │
│   40 │   │   │   # and also hijacks /usr/bin/git with a trigger that prompts the                                                                                                 │
│                                                                                                                                                                                  │
│ C:\Users\rjcsyb2\AppData\Roaming\Python\Python39\site-packages\git\__init__.py:91 in <module>                                                                                    │
│                                                                                                                                                                                  │
│   88 try:                                                                                                                                                                        │
│   89 │   refresh()                                                                                                                                                               │
│   90 except Exception as _exc:                                                                                                                                                   │
│ ❱ 91 │   raise ImportError("Failed to initialize: {0}".format(_exc)) from _exc                                                                                                   │
│   92 #################                                                                                                                                                           │
│   93                                                                                                                                                                             │
│                                                                                                                                                                                  │
│ ╭────────────────────────────────────────────────────────────────────────────── locals ───────────────────────────────────────────────────────────────────────────────╮          │
│ │               _init_externals = <function _init_externals at 0x0000029471895700>                                                                                    │          │
│ │                         Actor = <class 'git.util.Actor'>                                                                                                            │          │
│ │           AmbiguousObjectName = <class 'gitdb.exc.AmbiguousObjectName'>                                                                                             │          │
│ │                       BadName = <class 'gitdb.exc.BadName'>                                                                                                         │          │
│ │                     BadObject = <class 'gitdb.exc.BadObject'>                                                                                                       │          │
│ │                 BadObjectType = <class 'gitdb.exc.BadObjectType'>                                                                                                   │          │
│ │                          base = <module 'git.index.base' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\index\\base.py'>         │          │
│ │                BaseIndexEntry = <class 'git.index.typ.BaseIndexEntry'>                                                                                              │          │
│ │                          Blob = <class 'git.objects.blob.Blob'>                                                                                                     │          │
│ │                    BlobFilter = <class 'git.index.typ.BlobFilter'>                                                                                                  │          │
│ │              BlockingLockFile = <class 'git.util.BlockingLockFile'>                                                                                                 │          │
│ │                    CacheError = <class 'git.exc.CacheError'>                                                                                                        │          │
│ │                 CheckoutError = <class 'git.exc.CheckoutError'>                                                                                                     │          │
│ │                           cmd = <module 'git.cmd' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\cmd.py'>                        │          │
│ │                  CommandError = <class 'git.exc.CommandError'>                                                                                                      │          │
│ │                        Commit = <class 'git.objects.commit.Commit'>                                                                                                 │          │
│ │                        compat = <module 'git.compat' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\compat.py'>                  │          │
│ │                        config = <module 'git.config' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\config.py'>                  │          │
│ │                            db = <module 'git.db' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\db.py'>                          │          │
│ │                          diff = <module 'git.diff' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\diff.py'>                      │          │
│ │                          Diff = <class 'git.diff.Diff'>                                                                                                             │          │
│ │                      Diffable = <class 'git.diff.Diffable'>                                                                                                         │          │
│ │                     DiffIndex = <class 'git.diff.DiffIndex'>                                                                                                        │          │
│ │                           exc = <module 'git.exc' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\exc.py'>                        │          │
│ │                     FetchInfo = <class 'git.remote.FetchInfo'>                                                                                                      │          │
│ │                           fun = <module 'git.index.fun' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\index\\fun.py'>           │          │
│ │                           Git = <class 'git.cmd.Git'>                                                                                                               │          │
│ │                        GIT_OK = False                                                                                                                               │          │
│ │                GitCmdObjectDB = <class 'git.db.GitCmdObjectDB'>                                                                                                     │          │
│ │               GitCommandError = <class 'git.exc.GitCommandError'>                                                                                                   │          │
│ │            GitCommandNotFound = <class 'git.exc.GitCommandNotFound'>                                                                                                │          │
│ │               GitConfigParser = <class 'git.config.GitConfigParser'>                                                                                                │          │
│ │                         GitDB = <class 'gitdb.db.git.GitDB'>                                                                                                        │          │
│ │                      GitError = <class 'git.exc.GitError'>                                                                                                          │          │
│ │                          head = <module 'git.refs.head' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\refs\\head.py'>           │          │
│ │                          HEAD = <class 'git.refs.head.HEAD'>                                                                                                        │          │
│ │                          Head = <class 'git.refs.head.Head'>                                                                                                        │          │
│ │            HookExecutionError = <class 'git.exc.HookExecutionError'>                                                                                                │          │
│ │                         index = <module 'git.index' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\index\\__init__.py'>          │          │
│ │                    IndexEntry = <class 'git.index.typ.IndexEntry'>                                                                                                  │          │
│ │                     IndexFile = <class 'git.index.base.IndexFile'>                                                                                                  │          │
│ │                   IndexObject = <class 'git.objects.base.IndexObject'>                                                                                              │          │
│ │                       inspect = <module 'inspect' from 'C:\\Users\\rjcsyb2\\AppData\\Local\\Programs\\Python\\Python39\\lib\\inspect.py'>                           │          │
│ │                 InvalidDBRoot = <class 'gitdb.exc.InvalidDBRoot'>                                                                                                   │          │
│ │     InvalidGitRepositoryError = <class 'git.exc.InvalidGitRepositoryError'>                                                                                         │          │
│ │                          List = typing.List                                                                                                                         │          │
│ │                      LockFile = <class 'git.util.LockFile'>                                                                                                         │          │
│ │                           log = <module 'git.refs.log' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\refs\\log.py'>             │          │
│ │               NoSuchPathError = <class 'git.exc.NoSuchPathError'>                                                                                                   │          │
│ │                     NULL_TREE = <object object at 0x0000029470E7A840>                                                                                               │          │
│ │                        Object = <class 'git.objects.base.Object'>                                                                                                   │          │
│ │                       objects = <module 'git.objects' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\objects\\__init__.py'>      │          │
│ │                      ODBError = <class 'gitdb.exc.ODBError'>                                                                                                        │          │
│ │                      Optional = typing.Optional                                                                                                                     │          │
│ │                            os = <module 'os' from 'C:\\Users\\rjcsyb2\\AppData\\Local\\Programs\\Python\\Python39\\lib\\os.py'>                                     │          │
│ │                           osp = <module 'ntpath' from 'C:\\Users\\rjcsyb2\\AppData\\Local\\Programs\\Python\\Python39\\lib\\ntpath.py'>                             │          │
│ │                    ParseError = <class 'gitdb.exc.ParseError'>                                                                                                      │          │
│ │                      PathLike = typing.Union[str, ForwardRef('os.PathLike[str]')]                                                                                   │          │
│ │                      PushInfo = <class 'git.remote.PushInfo'>                                                                                                       │          │
│ │                     reference = <module 'git.refs.reference' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\refs\\reference.py'> │          │
│ │                     Reference = <class 'git.refs.reference.Reference'>                                                                                              │          │
│ │                        RefLog = <class 'git.refs.log.RefLog'>                                                                                                       │          │
│ │                   RefLogEntry = <class 'git.refs.log.RefLogEntry'>                                                                                                  │          │
│ │                       refresh = <function refresh at 0x00000294718958B0>                                                                                            │          │
│ │                          refs = <module 'git.refs' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\refs\\__init__.py'>            │          │
│ │                        remote = <module 'git.remote' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\remote.py'>                  │          │
│ │                        Remote = <class 'git.remote.Remote'>                                                                                                         │          │
│ │                RemoteProgress = <class 'git.util.RemoteProgress'>                                                                                                   │          │
│ │               RemoteReference = <class 'git.refs.remote.RemoteReference'>                                                                                           │          │
│ │    remove_password_if_present = <function remove_password_if_present at 0x0000029471953DC0>                                                                         │          │
│ │                          repo = <module 'git.repo' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\repo\\__init__.py'>            │          │
│ │                          Repo = <class 'git.repo.base.Repo'>                                                                                                        │          │
│ │          RepositoryDirtyError = <class 'git.exc.RepositoryDirtyError'>                                                                                              │          │
│ │                        rmtree = <function rmtree at 0x0000029471953280>                                                                                             │          │
│ │                    RootModule = <class 'git.objects.submodule.root.RootModule'>                                                                                     │          │
│ │            RootUpdateProgress = <class 'git.objects.submodule.root.RootUpdateProgress'>                                                                             │          │
│ │                   safe_decode = <function safe_decode at 0x0000029471895CA0>                                                                                        │          │
│ │                      Sequence = typing.Sequence                                                                                                                     │          │
│ │                     StageType = <class 'int'>                                                                                                                       │          │
│ │                         Stats = <class 'git.util.Stats'>                                                                                                            │          │
│ │                     Submodule = <class 'git.objects.submodule.base.Submodule'>                                                                                      │          │
│ │                      symbolic = <module 'git.refs.symbolic' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\refs\\symbolic.py'>   │          │
│ │             SymbolicReference = <class 'git.refs.symbolic.SymbolicReference'>                                                                                       │          │
│ │                           sys = <module 'sys' (built-in)>                                                                                                           │          │
│ │                           tag = <module 'git.refs.tag' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\refs\\tag.py'>             │          │
│ │                           Tag = <class 'git.refs.tag.TagReference'>                                                                                                 │          │
│ │                     TagObject = <class 'git.objects.tag.TagObject'>                                                                                                 │          │
│ │                  TagReference = <class 'git.refs.tag.TagReference'>                                                                                                 │          │
│ │                    to_hex_sha = <function to_hex_sha at 0x00000294718E8CA0>                                                                                         │          │
│ │                          Tree = <class 'git.objects.tree.Tree'>                                                                                                     │          │
│ │                  TreeModifier = <class 'git.objects.tree.TreeModifier'>                                                                                             │          │
│ │                         Tuple = typing.Tuple                                                                                                                        │          │
│ │                           typ = <module 'git.index.typ' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\index\\typ.py'>           │          │
│ │                 TYPE_CHECKING = False                                                                                                                               │          │
│ │                         types = <module 'git.types' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\types.py'>                    │          │
│ │                         Union = typing.Union                                                                                                                        │          │
│ │          UnmergedEntriesError = <class 'git.exc.UnmergedEntriesError'>                                                                                              │          │
│ │             UnsafeOptionError = <class 'git.exc.UnsafeOptionError'>                                                                                                 │          │
│ │           UnsafeProtocolError = <class 'git.exc.UnsafeProtocolError'>                                                                                               │          │
│ │          UnsupportedOperation = <class 'gitdb.exc.UnsupportedOperation'>                                                                                            │          │
│ │                UpdateProgress = <class 'git.objects.submodule.base.UpdateProgress'>                                                                                 │          │
│ │                          util = <module 'git.index.util' from 'C:\\Users\\rjcsyb2\\AppData\\Roaming\\Python\\Python39\\site-packages\\git\\index\\util.py'>         │          │
│ │ WorkTreeRepositoryUnsupported = <class 'git.exc.WorkTreeRepositoryUnsupported'>                                                                                     │          │
│ ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯          │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
ImportError: Failed to initialize: Bad git executable.
The git executable must be specified in one of the following ways:
    - be included in your $PATH
    - be set via $GIT_PYTHON_GIT_EXECUTABLE
    - explicitly set via git.refresh()

All git commands will error until this is rectified.

This initial warning can be silenced or aggravated in the future by setting the
$GIT_PYTHON_REFRESH environment variable. Use one of the following values:
    - quiet|q|silence|s|none|n|0: for no warning or exception
    - warn|w|warning|1: for a printed warning
    - error|e|raise|r|2: for a raised exception

Example:
    export GIT_PYTHON_REFRESH=quiet


The above exception was the direct cause of the following exception:

╭─────────────────────────────────────────────────────────────────────── Traceback (most recent call last) ────────────────────────────────────────────────────────────────────────╮
│ C:\Users\rjcsyb2\AppData\Roaming\Python\Python39\site-packages\briefcase\__main__.py:25 in main                                                                                  │
│                                                                                                                                                                                  │
│   22 │   │   command = Command(logger=logger, console=console)                                                                                                                   │
│   23 │   │   options = command.parse_options(extra=extra_cmdline)                                                                                                                │
│   24 │   │   command.parse_config(Path.cwd() / "pyproject.toml")                                                                                                                 │
│ ❱ 25 │   │   command(**options)                                                                                                                                                  │
│   26 │   except HelpText as e:                                                                                                                                                   │
│   27 │   │   logger.info()                                                                                                                                                       │
│   28 │   │   logger.info(str(e))                                                                                                                                                 │
│                                                                                                                                                                                  │
│ ╭─────────────────────────────────────────────────────────────────────────────────── locals ───────────────────────────────────────────────────────────────────────────────────╮ │
│ │       command = <briefcase.commands.new.NewCommand object at 0x000002946E14B8E0>                                                                                             │ │
│ │       Command = <class 'briefcase.commands.new.NewCommand'>                                                                                                                  │ │
│ │       console = <briefcase.console.Console object at 0x000002946E14B8B0>                                                                                                     │ │
│ │             e = BriefcaseCommandError('Briefcase requires git, but it is not installed (or is not on your PATH). Visit:\n\n    https://git-scm.com/\n\nto download and       │ │
│ │                 install git manually.\n\nIf you have installed git recently and are still getting this error, you may\nneed to restart your terminal session.\n')            │ │
│ │ extra_cmdline = []                                                                                                                                                           │ │
│ │        logger = <briefcase.console.Log object at 0x000002946DE2A3D0>                                                                                                         │ │
│ │       options = {'template': None, 'template_branch': None}                                                                                                                  │ │
│ │        result = 200                                                                                                                                                          │ │
│ ╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯ │
│                                                                                                                                                                                  │
│ C:\Users\rjcsyb2\AppData\Roaming\Python\Python39\site-packages\briefcase\commands\new.py:529 in __call__                                                                         │
│                                                                                                                                                                                  │
│   526 │   ):                                                                                                                                                                     │
│   527 │   │   # Confirm host compatibility, and that all required tools are available.                                                                                           │
│   528 │   │   # There are no apps, so finalize() will be a no op on app configurations.                                                                                          │
│ ❱ 529 │   │   self.finalize()                                                                                                                                                    │
│   530 │   │                                                                                                                                                                      │
│   531 │   │   return self.new_app(                                                                                                                                               │
│   532 │   │   │   template=template, template_branch=template_branch, **options                                                                                                  │
│                                                                                                                                                                                  │
│ ╭────────────────────────────────────── locals ──────────────────────────────────────╮                                                                                           │
│ │         options = {}                                                               │                                                                                           │
│ │            self = <briefcase.commands.new.NewCommand object at 0x000002946E14B8E0> │                                                                                           │
│ │        template = None                                                             │                                                                                           │
│ │ template_branch = None                                                             │                                                                                           │
│ ╰────────────────────────────────────────────────────────────────────────────────────╯                                                                                           │
│                                                                                                                                                                                  │
│ C:\Users\rjcsyb2\AppData\Roaming\Python\Python39\site-packages\briefcase\commands\base.py:523 in finalize                                                                        │
│                                                                                                                                                                                  │
│   520 │   │   │   to finalize. By default, all apps will be finalized.                         ╭──────────────────────────────── locals ─────────────────────────────────╮       │
│   521 │   │   """                                                                              │  app = None                                                             │       │
│   522 │   │   self.verify_host()                                                               │ self = <briefcase.commands.new.NewCommand object at 0x000002946E14B8E0> │       │
│ ❱ 523 │   │   self.verify_tools()                                                              ╰─────────────────────────────────────────────────────────────────────────╯       │
│   524 │   │                                                                                                                                                                      │
│   525 │   │   if app is None:                                                                                                                                                    │
│   526 │   │   │   for app in self.apps.values():                                                                                                                                 │
│                                                                                                                                                                                  │
│ C:\Users\rjcsyb2\AppData\Roaming\Python\Python39\site-packages\briefcase\commands\new.py:519 in verify_tools                                                                     │
│                                                                                                                                                                                  │
│   516 │   │   Raises MissingToolException if a required system tool is missing.                ╭──────────────────────────────── locals ─────────────────────────────────╮       │
│   517 │   │   """                                                                              │ self = <briefcase.commands.new.NewCommand object at 0x000002946E14B8E0> │       │
│   518 │   │   super().verify_tools()                                                           ╰─────────────────────────────────────────────────────────────────────────╯       │
│ ❱ 519 │   │   Git.verify(tools=self.tools)                                                                                                                                       │
│   520 │                                                                                                                                                                          │
│   521 │   def __call__(                                                                                                                                                          │
│   522 │   │   self,                                                                                                                                                              │
│                                                                                                                                                                                  │
│ C:\Users\rjcsyb2\AppData\Roaming\Python\Python39\site-packages\briefcase\integrations\base.py:73 in verify                                                                       │
│                                                                                                                                                                                  │
│    70 │   ) -> ToolT:                                                                          ╭─────────────────────────────────── locals ────────────────────────────────────╮ │
│    71 │   │   """Confirm the tool is available and usable on the host platform."""             │    app = None                                                                 │ │
│    72 │   │   cls.verify_host(tools=tools)                                                     │    cls = <class 'briefcase.integrations.git.Git'>                             │ │
│ ❱  73 │   │   tool = cls.verify_install(tools=tools, app=app, **kwargs)                        │ kwargs = {}                                                                   │ │
│    74 │   │   return tool                                                                      │  tools = <briefcase.integrations.base.ToolCache object at 0x0000029471867F70> │ │
│    75 │                                                                                        ╰───────────────────────────────────────────────────────────────────────────────╯ │
│    76 │   @classmethod                                                                                                                                                           │
│                                                                                                                                                                                  │
│ C:\Users\rjcsyb2\AppData\Roaming\Python\Python39\site-packages\briefcase\integrations\git.py:62 in verify_install                                                                │
│                                                                                                                                                                                  │
│   59 │   │   │   │   ) from e                                                                 ╭─────────────────────────────────── locals ────────────────────────────────────╮  │
│   60 │   │   │                                                                                │    cls = <class 'briefcase.integrations.git.Git'>                             │  │
│   61 │   │   │   else:                                                                        │ kwargs = {'app': None}                                                        │  │
│ ❱ 62 │   │   │   │   raise BriefcaseCommandError(                                             │  tools = <briefcase.integrations.base.ToolCache object at 0x0000029471867F70> │  │
│   63 │   │   │   │   │   """\                                                                 ╰───────────────────────────────────────────────────────────────────────────────╯  │
│   64 Briefcase requires git, but it is not installed (or is not on your PATH). Visit:                                                                                            │
│   65                                                                                                                                                                             │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
BriefcaseCommandError: Briefcase requires git, but it is not installed (or is not on your PATH). Visit:

    https://git-scm.com/

to download and install git manually.

If you have installed git recently and are still getting this error, you may
need to restart your terminal session.

